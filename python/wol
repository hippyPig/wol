#!/usr/bin/python
################################################################################

"""
wol is named for the most intelligent inhabitant of the Hundred Acre Wood.
He will gladly manage arXiv papers for you.

Setup your WOLDIR to be where you wish, and then begin.
If not set it will use the current directory.

See /wol/README.md for more details.

"""

__title__  = "wol"
__author__ = "Sam Hall"
__email__  = "scphall@gmail.com"
__version__ = "v2r0"

################################################################################
import os
import pickle
import re
import sys
import urllib
from random import randint
from wolArxivs import *
################################################################################

def set_dotwol(arxivs):
    with open(WolVars().dotwol, 'wb') as f:
        pickle.dump(arxivs._arxivs, f)
        pickle.dump(arxivs._config, f)
    return
################################################################################

def read_dotwol(filename=None):
    arxivs = ArXivs()
    if filename is None:
        filename = WolVars().dotwol
    if not os.path.exists(WolVars().dotwol):
        print 'Making new .wol file'
        with open(filename, 'wb') as f:
            pickle.dump({}, f)
            pickle.dump({}, f)
    else:
        with open(filename, 'rb') as f:
            arxivs.set_arxivs(pickle.load(f))
            arxivs.set_config(pickle.load(f))
    return arxivs
################################################################################

def add(arxivs, *args):
    """Add arXiv paper to wol           : wol add arXiv-paper(s) [optional tag]"""
    dir = None
    if len(args) == 0:
        print "wol add requires argument(s)"
        return arxivs
    if not ArXiv().get_arxiv_number(args[-1]) and len(args) > 1:
        dir = args[-1]
        args = args[:-1]
    for arg in args:
        arxivs.add(arg)
        if dir is not None:
            arxivs.move(arg, dir)
        print '{0}\n{1}'.format('-' * 80, arxivs.get(arg))
    print 80 * '-'
    return arxivs
################################################################################

def addwol(arxivs, *args):
    """Add another .wol file to wol     : wol addwol another-dot-wol-file"""
    for arg in args:
        new_arxivs = read_dotwol(arg)
        arxivs.add(new_arxivs)
    return arxivs
################################################################################

def find(arxivs, *args):
    """Add a paper to wol               : wol find [optional searches AND]"""
    if len(args) == 0:
        arxivs.find('.')
    else:
        arxivs.find(*args)
    return arxivs
################################################################################

def move(arxivs, *args):
    """Move all matching papers to tag  : wol move search tag"""
    if len(args) > 1:
        dir = args[len(args) - 1]
        for arg in args[:-1]:
            arxivs.move(arg, dir, printer=True)
    print 80 * '-'
    return arxivs
################################################################################

def show(arxivs, *args):
    """Show matching papers             : wol show search [AND search2,3,...]"""
    files = arxivs.find(*args)
    if len(files) > arxivs.show_max:
        out =  ' , ,    Requested to open {} files\n'.format(len(files))
        out += '(o,o)   Only allowed to open {}.  '.format(arxivs.show_max)
        out += 'Change in config or restrict search'
        print out
        return arxivs
    filelist = ''
    for file in files:
        filelist += '"{}" '.format(file)
    cmd = arxivs.viewer
    if not cmd.count('{}'):
        cmd += ' {} '
    cmd = cmd.format(filelist)
    if len(files) > 0:
        os.system(cmd)
    return arxivs
################################################################################

def config(arxivs, *args):
    """Show or set config               : wol config [option new-setting]"""
    if len(args) == 2:
        arxivs.config(args[0], args[1])
    arxivs.show_config()
    return arxivs
################################################################################

def update(arxivs, *args):
    """Ensure wol is up to date         : wol update"""
    arxivs.check()
    return arxivs
################################################################################

def delete(arxivs, *args):
    """Remove paper explicitly (1-by-1) : wol delete filename"""
    for arg in args:
        if not arxivs.delete(arg):
            if len(arxivs.find(arg, printer=False)):
                print ' , ,   Cannot delete {}'.format(arg)
                print '(o,o)  This filename, explicitly, is not in wol'
    return arxivs
################################################################################

def help(operations):
    out = '\n'
    out += "    , ,   Wol is here to help.\n"
    out += "   (o,o)    \n"
    out += "  ./)``)    \n"
    out += '----"-"---<_\n\n'
    out += 'Operation   Description                        Usage'
    print out
    for key, item in sorted(operations.iteritems()):
        print ' {:10s} {}'.format(key, item.__doc__)
    print "    For display problems check your config!\n"
    return
################################################################################

def hello(arxivs, *args):
    """Hello.                           : wol hello"""
    quotes = [
        ["... luckily Owl kept his head and told us that the",
         "Opposite of an Introduction, my dear Pooh, was a",
         "Contradiction; and, as he is very good at long words,",
         "I am sure that that's what it is."],
        ["... Owl, wise though he was in many ways, able to read",
         "and write and spell his own name WOL, yet somehow",
         "went all to pieces over delicate words like",
         "MEASLES and BUTTEREDTOAST."],
        ["And he respects Owl, because you can't help respecting",
         "anybody who can spell TUESDAY, even if he doesn't spell",
         "it right; but spelling isn't everything. There are days",
         "when spelling Tuesday simply doesn't count."],
        ["", "HIPY PAPY BTHUTHDTH THUTHDA", "         BTHUTHDY.",""],
        ["Pooh had wandered into the Hundred Acre Wood, and was standing",
         "in front of what had once been Owl's house. It didn't look at all",
         "like a house now, it looked like a tree that had been blown down;",
         "and as soon as a house looks like that, it is time you tried to find another one."],
    ]
    out = '\n'
    out += "               {}\n"
    out += "    , ,        {}\n"
    out += "   (o,o)       {}\n"
    out += "  ./)``)       {}\n"
    out += '----"-"---<_     \n'
    print out.format(*quotes[randint(0, len(quotes) - 1)])
    return arxivs
################################################################################

def info(arxivs, *args):
    """Wol related information          : wol info"""
    out = 'Wol info\n'
    out += "               Author of wol     : {}\n".format(__author__)
    out += "    , ,        Number of entries : {}\n".format(len(arxivs))
    out += "   (o,o)       WOLDIR            : {}\n".format(os.getenv('WOLDIR'))
    out += "  ./)``)       \n"
    out += '----"-"---<_   \n'
    print out
    return arxivs
################################################################################

def browse(arxivs, *args):
    """Show arXiv papers in browser     : wol browse search"""
    files = arxivs.find(*args)
    #files = arxivs.find_arxivs(args[0])
    #cmd = '{} '.format(arxivs.browser)
    #if len(files) > 6:
        #files = files[:6]
    #for file in files:
        #cmd += '"{}" '.format(file.web_address)
    #if len(files) > 0:
        #os.system(cmd)
    #return arxivs
    if len(files) > arxivs.show_max:
        out =  ' , ,    Requested to open {} files\n'.format(len(files))
        out += '(o,o)   Only allowed to open {}.  '.format(arxivs.show_max)
        out += 'Change in config or restrict search'
        print out
        return arxivs
    filelist = ''
    for file in files:
        filelist += '"{}" '.format(file)
    cmd = arxivs.browser
    if not cmd.count('{}'):
        cmd += ' {} '
    cmd = cmd.format(filelist)
    if len(files) > 0:
        os.system(cmd)
    return arxivs
################################################################################

def put(arxivs, *args):
    """Put non arXiv document into wol  : wol path/to/file title tag"""
    out  = "Wol put usage: 1) filename\n"
    out += "    , ,        2) Title\n"
    out += "   (o,o)       3) tag"
    if (len(args) != 3):
        print out
    else:
        arxivs.put(*args)
    return arxivs

def opts(operation, *args):
    """Options parse and then run."""
    operations = {
        'add' : add,
        'addwol' : addwol,
        'move' : move,
        'find' : find,
        'show' : show,
        'config' : config,
        'update' : update,
        'del' : delete,
        'info' : info,
        'hello' : hello,
        'browse' : browse,
        'put' : put,
    }
    if operation.replace('-', '') in ['help', 'h']:
        help(operations)
        return
    if operation not in operations.keys():
        out =  ' , ,    Wol Error\n'
        out += '(o,o)   Unknown operation {}, try wol help'.format(operation)
        print out
    else:
        try:
            arxivs = read_dotwol()
            arxivs = operations[operation](arxivs, *args)
            set_dotwol(arxivs)
        except:
            out =  ' , ,    Wol Error in \'wol {}\'          : Usage\n'.format(operation)
            out += '(o,o)   '
            out += operations[operation].__doc__
            print out
    return
################################################################################

################################################################################
if __name__ == "__main__":
    """Run the script!"""
    out =  ' , ,    Plesse give an operation\n'
    out += '(o,o)   - OR ask for help'
    args = sys.argv[1:]
    if not args:
        print out
    else:
        operation = args.pop(0)
        opts(operation, *args)

